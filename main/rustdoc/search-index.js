var searchIndex = new Map(JSON.parse('[\
["log",{"doc":"A lightweight logging facade.","t":"PPPPPPGGKFFPFFFSFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNMNNNNNNNQNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNMQQHNNHNNNNNNNNNNNNNNHHHHNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNQ","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"],[170,"core::fmt"],[171,"core::cmp"],[172,"core::option"],[173,"core::fmt"],[174,"core::hash"],[175,"core::iter::traits::iterator"],[176,"core::any"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,10,4,4,6,6,8,7,12,0,1,3,1,3,10,4,4,6,6,1,3,8,7,17,17,12,12,4,6,1,3,8,7,17,12,4,6,4,6,8,7,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,1,3,10,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,0],"f":"`````````````````````{bd}{{fd}f}{hj}{lj}{ce{}{}}000000000000000{fb}{nA`}{{}f}{{}n}{hh}{ll}{bb}{A`A`}{{hh}Ab}{{ll}Ab}{{A`A`}Ab}{{nn}Ab}`98{{AdA`}Af}{{hh}Af}{{hl}Af}{{ll}Af}{{lh}Af}{{A`A`}Af}{{nn}Af}{{AhAh}Af}`{b{{Aj{j}}}}{{f{Aj{j}}}f}10{AdAl}{{hAn}B`}0{{lAn}B`}0{{bAn}B`}{{fAn}B`}{{A`An}B`}{{nAn}B`}{{BbAn}B`}0{{AhAn}B`}0{cc{}}0000000{j{{Bd{hc}}}{}}{j{{Bd{lc}}}{}}{{hc}AlBf}{{lc}AlBf}{{A`c}AlBf}{{nc}AlBf}`{ce{}{}}0000000{{}{{`{{Bj{}{{Bh{h}}}}}}}}{{}{{`{{Bj{}{{Bh{l}}}}}}}}{bh}{{fh}f}{A`h}{{nh}n}{b{{Aj{Bl}}}}{{f{Aj{Bl}}}f}{{Adb}Al}``{{}Ad}{{}h}{{}l}0{bA`}{{fA`}f}{b{{Aj{j}}}}{{f{Aj{j}}}f}10{{}f}{{}n}{{hl}{{Aj{Ab}}}}{{hh}{{Aj{Ab}}}}{{ll}{{Aj{Ab}}}}{{lh}{{Aj{Ab}}}}{{A`A`}{{Aj{Ab}}}}{{nn}{{Aj{Ab}}}}{Ad{{Bd{AlBb}}}}0{lAl}0{bj}{{fj}f}{A`j}{{nj}n}{l{{Aj{h}}}}{hl}`{c{{Bd{e}}}{}{}}000000000000000{cBn{}}0000000`","c":[],"p":[[5,"Record",0],[5,"Arguments",170],[5,"RecordBuilder",0],[6,"Level",0],[1,"str"],[6,"LevelFilter",0],[5,"MetadataBuilder",0],[5,"Metadata",0],[6,"Ordering",171],[10,"Log",0],[1,"bool"],[5,"ParseLevelError",0],[6,"Option",172],[1,"unit"],[5,"Formatter",170],[8,"Result",170],[5,"SetLoggerError",0],[6,"Result",173],[10,"Hasher",174],[17,"Item"],[10,"Iterator",175],[1,"u32"],[5,"TypeId",176]],"b":[[57,"impl-PartialEq-for-Level"],[58,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[59,"impl-PartialEq-for-LevelFilter"],[60,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[70,"impl-Debug-for-Level"],[71,"impl-Display-for-Level"],[72,"impl-Display-for-LevelFilter"],[73,"impl-Debug-for-LevelFilter"],[78,"impl-Display-for-SetLoggerError"],[79,"impl-Debug-for-SetLoggerError"],[80,"impl-Debug-for-ParseLevelError"],[81,"impl-Display-for-ParseLevelError"],[128,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[129,"impl-PartialOrd-for-Level"],[130,"impl-PartialOrd-for-LevelFilter"],[131,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"]]}],\
["wasm",{"doc":"","t":"PPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPGPIGPFPPGFGPCCOOOOOOCOOOOOOOQHCCCOOCCCPPPPGPPPPPPPPPPPPPPPPPPPPPPPIGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNIIIIIIIIIKFNNNONNNNNNNONMNNMNNNNNNCNCNNNNCPPPPPPPPPPFGPPPNNNNNNONNNNNNNNNNNNNNNNNONNFNNNNNNONNNONNNNNPPPPFPPFFGPGPFFGFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCNNNNNNNNNNNNNNNNNCCCNNNNNNNNNOOOCOCONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCFGPPPPNNNNNNNNONNNNNNONNNNNNNNNNNNFNNONNONNNFFNNNNNNNNNNNNNNONNONNNNNNNNNNOONNPPFGPPNNNNONNNNNNOONNNNNNNNNNFONNNNONNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSFCNNONNOCNNNNNCCNNCONNNOCCOKMFKNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNFNNONNNNNNNNFFFTFFNNNNNNNNNNOOONNNNNOOONNNNNNOONNNNNNNNNNNNOOONNNNNOPPKKPGTTGNNNNNNNNNNNNNNNNNNNMMQNNMMNNNNNNNNNPPFGPNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNFKFNNCONOOOHONOHOONNNOHOHHHHPPKKPGTTGMMMMPPGP","n":["DivideBy0","EndInvalidValueStack","Eof","Err","Error","ExprMissingEnd","ExternRef","F32","F64","FuncRef","FunctionNotFound","GlobalIsConst","I32","I32","I64","I64","InvalidExportDesc","InvalidFuncType","InvalidGlobalIdx","InvalidImportDesc","InvalidInstr","InvalidLimitsType","InvalidLocalIdx","InvalidMagic","InvalidMultiByteInstr","InvalidMutType","InvalidNumType","InvalidRefType","InvalidSectionType","InvalidValType","InvalidValueStackType","InvalidVecType","InvalidVersion","MalformedUtf8String","MoreThanOneMemory","NumType","NumType","Ok","RefType","RefType","Result","RuntimeError","RuntimeError","RuntimeInstance","SectionOutOfOrder","UnrepresentableResult","ValType","ValidationInfo","Value","VecType","core","execution","exports","exports","func_blocks","functions","globals","hook_set","hooks","imports","memories","start","store","tables","types","types","unreachable_validated","validate","validation","value","value_stack","wasm","wasm_bytecode","error","indices","reader","DivideBy0","EndInvalidValueStack","Eof","Err","Error","ExprMissingEnd","FunctionNotFound","GlobalIsConst","InvalidExportDesc","InvalidFuncType","InvalidGlobalIdx","InvalidImportDesc","InvalidInstr","InvalidLimitsType","InvalidLocalIdx","InvalidMagic","InvalidMultiByteInstr","InvalidMutType","InvalidNumType","InvalidRefType","InvalidSectionType","InvalidValType","InvalidValueStackType","InvalidVecType","InvalidVersion","MalformedUtf8String","MoreThanOneMemory","Ok","Result","RuntimeError","RuntimeError","SectionOutOfOrder","UnrepresentableResult","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","into","into","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","DataIdx","ElemIdx","FuncIdx","GlobalIdx","LabelIdx","LocalIdx","MemIdx","TableIdx","TypeIdx","WasmReadable","WasmReader","borrow","borrow_mut","from","full_wasm_binary","index","into","into_inner","make_span","measure_num_read_bytes","move_start_to","new","pc","peek_u8","read","read_name","read_u8","read_unvalidated","read_var_i32","read_var_i64","read_var_u32","read_vec","read_vec_enumerated","remaining_bytes","section_header","skip","span","strip_bytes","try_from","try_into","type_id","types","Code","Custom","Data","DataCount","Element","Export","Function","Global","Import","Memory","SectionHeader","SectionTy","Start","Table","Type","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","contents","eq","fmt","fmt","from","from","hash","into","into","read","read","read_unvalidated","read_unvalidated","to_owned","try_from","try_from","try_into","try_into","ty","type_id","type_id","Span","borrow","borrow_mut","clone","clone_into","fmt","from","from","hash","into","len","len","new","to_owned","try_from","try_into","type_id","ExternRef","F32","F64","FuncRef","FuncType","I32","I64","Limits","MemType","NumType","NumType","RefType","RefType","ResultType","TableType","ValType","VecType","VecType","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","et","export","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","function_code_header","global","import","into","into","into","into","into","into","into","into","into","lim","limits","max","memarg","min","opcode","params","read","read","read","read","read","read","read","read","read","read_unvalidated","read_unvalidated","read_unvalidated","read_unvalidated","read_unvalidated","read_unvalidated","read_unvalidated","read_unvalidated","read_unvalidated","returns","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valtypes","values","Export","ExportDesc","FuncIdx","GlobalIdx","MemIdx","TableIdx","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","desc","fmt","fmt","from","from","into","into","name","read","read","read_unvalidated","read_unvalidated","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","FunctionHeader","borrow","borrow_mut","expr_span","from","into","locals","try_from","try_into","type_id","Global","GlobalType","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","init_expr","into","into","is_mut","read","read","read_unvalidated","read_unvalidated","to_owned","to_owned","try_from","try_from","try_into","try_into","ty","ty","type_id","type_id","Func","Global","Import","ImportDesc","Mem","Table","borrow","borrow","borrow_mut","borrow_mut","desc","fmt","fmt","from","from","into","into","module_name","name","read","read","read_unvalidated","read_unvalidated","try_from","try_from","try_into","try_into","type_id","type_id","MemArg","align","borrow","borrow_mut","from","into","offset","read","read_unvalidated","try_from","try_into","type_id","END","GLOBAL_GET","GLOBAL_SET","I32_ADD","I32_AND","I32_CLZ","I32_CONST","I32_CTZ","I32_DIV_S","I32_DIV_U","I32_LOAD","I32_MUL","I32_OR","I32_POPCNT","I32_REM_S","I32_REM_U","I32_ROTL","I32_ROTR","I32_SHL","I32_SHR_S","I32_SHR_U","I32_STORE","I32_XOR","I64_ADD","I64_AND","I64_CLZ","I64_CONST","I64_CTZ","I64_DIV_S","I64_DIV_U","I64_MUL","I64_OR","I64_POPCNT","I64_REM_S","I64_REM_U","I64_ROTL","I64_ROTR","I64_SHL","I64_SHR_S","I64_SHR_U","I64_SUB","I64_XOR","LOCAL_GET","LOCAL_SET","NOP","RuntimeInstance","assert_validated","borrow","borrow_mut","exports","from","function","hook_set","hooks","init_store","into","invoke_dynamic","invoke_func","invoke_named","label","locals","new","new_with_hooks","store","store","try_from","try_into","type_id","types","value","value_stack","wasm_bytecode","UnwrapValidatedExt","unwrap_validated","EmptyHookSet","HookSet","borrow","borrow_mut","default","from","instruction_hook","instruction_hook","into","try_from","try_into","type_id","ActivationFrame","Label","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Locals","borrow","borrow_mut","data","from","get","get_mut","into","new","try_from","try_into","type_id","FuncInst","GlobalInst","MemInst","PAGE_SIZE","Store","TableInst","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","code_expr","data","elem","from","from","from","from","from","funcs","global","globals","grow","into","into","into","into","into","locals","mems","new","size","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","value","I32","I64","InteropValue","InteropValueList","Null","Ref","TY","TYS","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_from_ty","eq","eq","fmt","fmt","from","from","from","from","from","from","from_value","from_values","impl_value_conversion","into","into","into_value","into_values","to_owned","to_owned","to_ty","try_from","try_from","try_into","try_into","type_id","type_id","Activation","Label","Stack","StackEntry","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","inner","into","into","into_activation","into_label","into_value","len","new","pop_value","push_value","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","EmptyHookSet","HookSet","ValidationInfo","borrow","borrow_mut","code","exports","from","func_blocks","functions","globals","handle_section","imports","into","memories","read_next_header","start","tables","try_from","try_into","type_id","types","validate","wasm","read_declared_locals","read_instructions","validate_code_section","validate_value_stack","I32","I64","InteropValue","InteropValueList","Null","Ref","TY","TYS","Value","from_value","from_values","into_value","into_values","Activation","Label","StackEntry","Value"],"q":[[0,"wasm"],[73,"wasm::core"],[76,"wasm::core::error"],[135,"wasm::core::indices"],[144,"wasm::core::reader"],[177,"wasm::core::reader::section_header"],[219,"wasm::core::reader::span"],[236,"wasm::core::reader::types"],[391,"wasm::core::reader::types::export"],[425,"wasm::core::reader::types::function_code_header"],[435,"wasm::core::reader::types::global"],[469,"wasm::core::reader::types::import"],[498,"wasm::core::reader::types::memarg"],[510,"wasm::core::reader::types::opcode"],[555,"wasm::execution"],[582,"wasm::execution::assert_validated"],[584,"wasm::execution::hooks"],[596,"wasm::execution::label"],[620,"wasm::execution::locals"],[632,"wasm::execution::store"],[688,"wasm::execution::value"],[732,"wasm::execution::value_stack"],[768,"wasm::hooks"],[770,"wasm::validation"],[792,"wasm::validation::code"],[796,"wasm::value"],[809,"wasm::value_stack"],[813,"core::fmt"],[814,"core::fmt"],[815,"core::result"],[816,"core::any"],[817,"core::ops::function"],[818,"alloc::vec"],[819,"core::ops::function"],[820,"core::iter::traits::iterator"],[821,"core::option"],[822,"alloc::collections::vec_deque"]],"d":["","","","Contains the error value","","","","","","","","","","","","","","","","","","","","The magic number at the very start of the given WASM file …","","","","","","","","","","","","…","","Contains the success value","…","","","","","","","","…","Information collected from validating a module. This can …","A value at runtime. This is essentially a duplicate of …","","","","","","","","","","","","","The start function which is automatically executed during …","","","","","","","","","","","","","","","","","","Contains the error value","","","","","","","","","","","","The magic number at the very start of the given WASM file …","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","A struct for managing and reading WASM bytecode","","","Returns the argument unchanged.","Entire WASM binary as slice","","Calls <code>U::from(self)</code>.","Consumes Self, yielding back the internal reference to the …","Create a Span starting from <code>pc</code> for the next <code>len</code> bytes","Call a closure that may mutate the WasmReader","Advance the cursor to the first byte of the provided Span …","Initialize a new WasmReader from a WASM byte slice","Current program counter, i. e. index of the next byte to …","Read the current byte without advancing the <code>pc</code>","","Note: If <code>Err</code>, the WasmReader object is no longer …","Note: If <code>Err</code>, the WasmReader object is no longer …","","","","Parses a variable-length <code>u32</code> as specified by LEB128. Note: …","Note: If <code>Err</code>, the WasmReader object is no longer …","","Byte slice to the remainder of the WASM binary, beginning …","","Skip <code>num_bytes</code>, advancing the <code>pc</code> accordingly","","Take <code>N</code> bytes starting from <code>pc</code>, then advance the <code>pc</code> by <code>N</code>","","","","Methods to read WASM Types from a WasmReader object.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","An index and offset to describe a (sub-) slice into WASM …","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns the length of this Span","","Create a new Span, starting from <code>from</code> and ranging <code>len</code> …","","","","","","","","","…","","","","","…","","…","","…","","…","…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Methods to read basic WASM Values from a WasmReader object.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helpers for assertions due to prior validation of a WASM …","","","","Returns the argument unchanged.","Interprets a functions. Parameters and return values are …","","","","Calls <code>U::from(self)</code>.","Invokes a function with the given parameters, and return …","Can only invoke functions with signature <code>[t1] -&gt; [t2]</code> as …","","","","","","","","","","","","","","","","","Default implementation of a hookset, with all hooks empty","Trait that allows user specified hooks for various events …","","","","Returns the argument unchanged.","A hook which is called before every wasm instruction","A hook which is called before every wasm instruction","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","A helper for managing values of locals (and parameters) …","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","The store represents all global state that can be …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Must be of the same type as specified in <code>ty</code>","","","An InteropValue is a Rust types that can be converted into …","An InteropValueList is an iterable list of InteropValues …","","","","","A value at runtime. This is essentially a duplicate of …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Stupid From and Into implementations, because Rust’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","The stack at runtime containing","This is a temporary solution for storing data on the stack.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Assumes this entry to be an ActivationFrame","Assumes this entry to be a Label","Assumes this entry to be a Value","","","","","","","","","","","","","Default implementation of a hookset, with all hooks empty","Trait that allows user specified hooks for various events …","Information collected from validating a module. This can …","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","The start function which is automatically executed during …","","","","","","","","","","","","","","An InteropValue is a Rust types that can be converted into …","An InteropValueList is an iterable list of InteropValues …","","","","","A value at runtime. This is essentially a duplicate of …","","","","","","","This is a temporary solution for storing data on the stack.",""],"i":[5,6,6,4,0,6,32,31,31,32,5,6,31,51,31,51,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,33,4,0,33,0,0,6,0,6,5,0,0,0,33,0,0,47,3,3,3,3,47,0,3,3,3,47,3,47,3,0,0,0,0,0,3,47,0,0,0,5,6,6,4,0,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,0,0,6,6,5,5,6,5,6,5,6,5,6,5,6,5,6,6,5,6,5,6,5,6,6,5,6,5,6,5,6,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,20,14,14,20,14,14,14,14,14,14,0,14,0,14,14,14,14,0,28,28,28,28,28,28,28,28,28,28,0,0,28,28,28,28,29,28,29,28,28,29,28,28,29,28,29,28,28,29,28,29,28,29,28,28,29,28,29,29,28,29,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,32,31,31,32,0,31,31,0,0,0,33,0,33,0,0,0,0,33,39,31,32,33,34,35,36,37,38,39,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,37,0,31,32,33,34,35,36,37,38,39,31,32,33,34,35,36,37,38,0,0,0,39,31,32,33,34,35,36,37,38,37,38,36,0,36,0,35,39,31,32,33,34,35,36,37,38,39,31,32,33,34,35,36,37,38,35,33,31,32,33,34,35,36,37,38,39,31,32,33,34,35,36,37,38,39,31,32,33,34,35,36,37,38,39,31,32,33,34,35,36,37,38,34,0,0,0,41,41,41,41,40,41,40,41,40,41,40,41,40,40,41,40,41,40,41,40,40,41,40,41,40,41,40,41,40,41,40,41,0,67,67,67,67,67,67,67,67,67,0,0,42,43,42,43,42,43,42,43,42,43,42,43,42,43,42,42,43,43,42,43,42,43,42,43,42,43,42,43,42,43,42,43,45,45,0,0,45,45,44,45,44,45,44,44,45,44,45,44,45,44,44,44,45,44,45,44,45,44,45,44,45,0,46,46,46,46,46,46,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,47,47,47,47,0,47,47,47,47,47,0,0,47,47,0,47,47,47,47,47,0,0,47,0,54,0,0,53,53,53,53,49,49,53,53,53,53,0,0,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,0,57,57,57,57,57,57,57,57,57,57,57,0,0,0,60,0,0,50,68,69,60,70,50,68,69,60,70,68,60,69,50,68,69,60,70,50,70,50,60,50,68,69,60,70,68,50,60,60,50,68,69,60,70,50,68,69,60,70,68,69,60,50,68,69,60,70,70,51,51,0,0,61,0,63,52,0,51,61,51,61,51,61,51,61,51,51,61,51,61,51,51,51,51,51,61,63,52,0,51,61,63,52,51,61,51,51,61,51,61,51,61,64,64,0,0,64,48,64,48,64,48,64,48,64,48,48,64,48,64,48,48,64,64,64,64,48,48,48,48,48,64,48,64,48,64,48,64,0,0,0,3,3,0,3,3,3,3,3,0,3,3,3,0,3,3,3,3,3,3,0,3,0,0,0,0,51,51,0,0,61,0,63,52,0,63,52,63,52,64,64,0,64],"f":"```````````````````````````````````````````````````````````````````{{{d{b}}}{{h{f}}}}`````````````````````````````````````````{ce{}{}}000{jj}{ll}{{ce}n{}{}}0{{jj}A`}{{ll}A`}{{jAb}Ad}{{lAb}Ad}0{cc{}}08888{cAf{}}{c{{Ah{e}}}{}{}}000{cAj{}}0```````````;;3`{{AlAn}c{}}<{Al{{d{b}}}}{{AlB`}{{h{An}}}}{{Ale}{{h{{Bb{cB`}}}}}{}{{Bf{Al}{{Bd{{h{c}}}}}}}}{{AlAn}{{h{n}}}}{{{d{b}}}Al}`{Al{{h{b}}}}{Al{{h{Bh}}}}{Al{{h{Bj}}}}2{AlBh}{Al{{h{Bl}}}}{Al{{h{Bn}}}}{Al{{h{C`}}}}{{Ale}{{h{{Cb{c}}}}}{}{{Cd{Al}{{Bd{{h{c}}}}}}}}{{Ale}{{h{{Cb{c}}}}}{}{{Cd{AlB`}{{Bd{{h{c}}}}}}}}=`{{AlB`}{{h{n}}}}`{Al{{h{{Cf{b}}}}}}{c{{Ah{e}}}{}{}}0{cAj{}}````````````````{ce{}{}}000{ChCh}{{ce}n{}{}}`{{ChCh}A`}{{ChAb}Ad}{{CjAb}Ad}{cc{}}0{{Chc}nCl}77{Al{{h{Ch}}}}{Al{{h{Cj}}}}{AlCh}{AlCj};====`<<`;;{AnAn}:{{AnAb}Ad}7`{{Anc}nCl}>{AnB`}`{{B`B`}An}{ce{}{}}{c{{Ah{e}}}{}{}}0{cAj{}}``````````````````222222222222222222{CnCn}{D`D`}{DbDb}{DdDd}{DfDf}{DhDh}{DjDj}{DlDl}{{ce}n{}{}}0000000{{CnCn}A`}{{D`D`}A`}{{DbDb}A`}{{DdDd}A`}{{DfDf}A`}{{DhDh}A`}{{DjDj}A`}{{DlDl}A`}``{{CnAb}Ad}{{D`Ab}Ad}{{DbAb}Ad}{{DdAb}Ad}{{DfAb}Ad}{{DhAb}Ad}{{DjAb}Ad}{{DlAb}Ad}{cc{}}00000000```{ce{}{}}00000000```````{Al{{h{Dn}}}}{Al{{h{Cn}}}}{Al{{h{D`}}}}{Al{{h{Db}}}}{Al{{h{Dd}}}}{Al{{h{Df}}}}{Al{{h{Dh}}}}{Al{{h{Dj}}}}{Al{{h{Dl}}}}{AlDn}{AlCn}{AlD`}{AlDb}{AlDd}{AlDf}{AlDh}{AlDj}{AlDl}`{DbB`}{ce{}{}}0000000{c{{Ah{e}}}{}{}}00000000000000000{cAj{}}00000000````````2222{E`E`}{EbEb}{{ce}n{}{}}0`{{E`Ab}Ad}{{EbAb}Ad}{cc{}}088`{Al{{h{E`}}}}{Al{{h{Eb}}}}{AlE`}{AlEb}<<;;;;::`<<`4<`;;:``<<<<{EdEd}{EfEf}99{{EdEd}A`}{{EfEf}A`}{{EdAb}Ad}{{EfAb}Ad}::`{ce{}{}}0`{Al{{h{Ed}}}}{Al{{h{Ef}}}}{AlEd}{AlEf}44{c{{Ah{e}}}{}{}}000``{cAj{}}0``````6666`{{EhAb}Ad}{{EjAb}Ad}{cc{}}099``{Al{{h{Eh}}}}{Al{{h{Ej}}}}{AlEh}{AlEj}888877``==4=`{Al{{h{El}}}}{AlEl}::9```````````````````````````````````````````````??`6{{{En{c}}B`F`}{{h{n}}}Fb}``{fFd}{ce{}{}}{{{En{c}}B`{Cb{Ff}}{d{Db}}}{{h{{Cb{Ff}}}}}Fb}{{{En{c}}B`e}{{h{g}}}FbFhFh}{{{En{c}}Bje}{{h{g}}}FbFhFh}``{f{{h{{En{Fj}}}}}}{{fc}{{h{{En{c}}}}}Fb}``{c{{Ah{e}}}{}{}}0{cAj{}}`````{Flc{}}``88{{}Fj}{cc{}}{{{En{Fb}}}n}0;554``;;;;{FnFn}{G`G`}{{ce}n{}{}}0{{FnAb}Ad}{{G`Ab}Ad}66{ce{}{}}000;;;;::`00`7{{GbB`}Ff}01{{ce}Gb{{Gf{}{{Gd{Ff}}}}}{{Gf{}{{Gd{Db}}}}}}==<``````2222222222```99999```{{GhB`}n}33333``{DlGh}{GhB`}{c{{Ah{e}}}{}{}}000000000```{cAj{}}0000``````````7777{FfFf}{GjGj}<<{DbFf}{{FfFf}A`}{{GjGj}A`}{{FfAb}Ad}{{GjAb}Ad}{GlFf}{C`Ff}{BlFf}{BnFf}{cc{}}0{FfGn}{cFh{{Gf{}{{Gd{Ff}}}}}}`{ce{}{}}0{GnFf}{Fh{{Cb{Ff}}}}22{FfDb}{c{{Ah{e}}}{}{}}000{cAj{}}0`````5555{F`F`}{H`H`}{{ce}n{}{}}0{{}F`}{{F`Ab}Ad}{{H`Ab}Ad}>>`;;{H`G`}{H`Fn}{H`Ff}{F`B`}6{{F`Db}Ff}{{F`Ff}n}{ce{}{}}0>>>>==```00``{cc{}}```{{Al{Hb{Cj}}Che}{{h{{Hb{c}}}}}{}{{Bf{AlCj}{{Bd{{h{c}}}}}}}}`2`{{Al{Hb{Cj}}}{{h{n}}}}``{c{{Ah{e}}}{}{}}0{cAj{}}`{{{d{b}}}{{h{f}}}}`{Al{{h{{Cb{Db}}}}}}{{Al{Hd{Db}}{d{Db}}{d{Ed}}}{{h{n}}}}{{AlCj{d{Df}}{d{B`}}{d{Ed}}}{{h{{Cb{An}}}}}}{{Ddc}{{h{n}}}{{Bf{{Hd{Db}}}{{Bd{{h{n}}}}}}}}`````````{FfGn}{cFh{{Gf{}{{Gd{Ff}}}}}}{GnFf}{Fh{{Cb{Ff}}}}````","c":[],"p":[[1,"u8"],[1,"slice"],[5,"ValidationInfo",770],[8,"Result",76],[6,"RuntimeError",76],[6,"Error",76],[1,"unit"],[1,"bool"],[5,"Formatter",813],[8,"Result",813],[5,"String",814],[6,"Result",815],[5,"TypeId",816],[5,"WasmReader",144],[5,"Span",219],[1,"usize"],[1,"tuple"],[17,"Output"],[10,"FnOnce",817],[10,"WasmReadable",144],[1,"str"],[1,"i32"],[1,"i64"],[1,"u32"],[5,"Vec",818],[10,"FnMut",817],[1,"array"],[6,"SectionTy",177],[5,"SectionHeader",177],[10,"Hasher",819],[6,"NumType",236],[6,"RefType",236],[6,"ValType",236],[5,"ResultType",236],[5,"FuncType",236],[5,"Limits",236],[5,"TableType",236],[5,"MemType",236],[5,"VecType",236],[5,"Export",391],[6,"ExportDesc",391],[5,"Global",435],[5,"GlobalType",435],[5,"Import",469],[6,"ImportDesc",469],[5,"MemArg",498],[5,"RuntimeInstance",555],[5,"Stack",732],[10,"HookSet",584],[5,"Store",632],[6,"Value",688],[10,"InteropValueList",688],[5,"EmptyHookSet",584],[10,"UnwrapValidatedExt",582],[5,"Label",596],[5,"ActivationFrame",596],[5,"Locals",620],[17,"Item"],[10,"Iterator",820],[5,"MemInst",632],[6,"Ref",688],[1,"u64"],[10,"InteropValue",688],[6,"StackEntry",732],[6,"Option",821],[5,"VecDeque",822],[5,"FunctionHeader",425],[5,"FuncInst",632],[5,"TableInst",632],[5,"GlobalInst",632]],"b":[[120,"impl-Debug-for-Error"],[121,"impl-Display-for-Error"],[710,"impl-From%3Cu64%3E-for-Value"],[711,"impl-From%3Cu32%3E-for-Value"],[712,"impl-From%3Ci32%3E-for-Value"],[713,"impl-From%3Ci64%3E-for-Value"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
